#this script employs resistance and support lines. It also alerts when price goes above/below those lines. It uses pivot points for reference.


input aggregationPeriod = AggregationPeriod.DAY;

def PH = high(period = aggregationPeriod)[1];
def PL = low(period = aggregationPeriod)[1];
def PC = close(period = aggregationPeriod)[1];

plot R3;
plot R3M;
plot R2;
plot R2M;
plot R1;
plot R1M;
plot HH;
plot PP;
plot LL;
plot S1M;
plot S1;
plot S2M;
plot S2;
plot S3M;
plot S3;

HH = PH;
LL = PL;
PP = (PH + PL + PC) / 3;
R1 = 2 * PP - PL;
R1M = (R1 - PP) / 2 + PP;
R2 = PP + (PH - PL);
R2M = (R2 - R1) / 2 + R1;
R3 = 2 * PP + (PH - 2 * PL);
R3M = (R3 - R2) / 2 + R2;
S1 = 2 * PP - PH;
S1M = (PP - S1) / 2 + S1;
S2 = PP - (PH - PL);
S2M = (S1 - S2) / 2 + S2;
S3 = 2 * PP - (2 * PH - PL);
S3M = (S2 - S3) / 2 + S3;

R3.SetDefaultColor(GetColor(6));
R3M.SetDefaultColor(GetColor(6));
R2.SetDefaultColor(GetColor(6));
R2M.SetDefaultColor(GetColor(6));
R1.SetDefaultColor(GetColor(6));
R1M.SetDefaultColor(GetColor(6));
HH.SetDefaultColor(GetColor(4));
PP.SetDefaultColor(GetColor(3));
LL.SetDefaultColor(GetColor(1));
S1.SetDefaultColor(GetColor(5));
S1M.SetDefaultColor(GetColor(5));
S2.SetDefaultColor(GetColor(5));
S2M.SetDefaultColor(GetColor(5));
S3.SetDefaultColor(GetColor(5));
S3M.SetDefaultColor(GetColor(5));

R3.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
R3M.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
R2.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
R2M.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
R1.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
R1M.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
HH.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
PP.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
LL.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
S1.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
S1M.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
S2.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
S2M.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
S3.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
S3M.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);

R3M.SetStyle(Curve.SHORT_DASH);
R2M.SetStyle(Curve.SHORT_DASH);
R1M.SetStyle(Curve.SHORT_DASH);
HH.SetStyle(Curve.MEDIUM_DASH);
LL.SetStyle(Curve.MEDIUM_DASH);
S1M.SetStyle(Curve.SHORT_DASH);
S2M.SetStyle(Curve.SHORT_DASH);
S3M.SetStyle(Curve.SHORT_DASH);

# Display values at the top of the chart
AddLabel(yes, "S3: " + AsText(s3), Color.RED);
AddLabel(yes, "S2: " + AsText(s2), Color.RED);
AddLabel(yes, "S1: " + AsText(s1), Color.RED);
AddLabel(yes, "PP: " + AsText(pp), Color.YELLOW);
AddLabel(yes, "R1: " + AsText(r1), Color.GREEN);
AddLabel(yes, "R2: " + AsText(r2), Color.GREEN);
AddLabel(yes, "R3: " + AsText(r3), Color.GREEN);

input enableAlertForQQQ_SPY_SPX = yes; # Yes to enable for QQQ, SPX & SPY, No otherwise

def price = close;
def previouslyBelowR1 = close[1] < R1;
def previouslyBelowR2 = close[1] < R2;
def previouslyBelowR3 = close[1] < R3;
def previouslyAboveS1 = close[1] > S1;
def previouslyAboveS2 = close[1] > S2;
def previouslyAboveS3 = close[1] > S3;

def crossAboveR1 = price > R1 and previouslyBelowR1;
def crossAboveR2 = price > R2 and previouslyBelowR2;
def crossAboveR3 = price > R3 and previouslyBelowR3;
def crossBelowS1 = price < S1 and previouslyAboveS1;
def crossBelowS2 = price < S2 and previouslyAboveS2;
def crossBelowS3 = price < S3 and previouslyAboveS3;


R3M.Hide();
R2M.Hide();
R1M.Hide();
HH.Hide();
LL.Hide();
S1M.Hide();
S2M.Hide();
S3M.Hide();
